{"version":3,"sources":["Api/api.js","Views/Test.js","Services/TestService.js","Views/Home.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["url","Test","props","state","apiResp","dbResp","axios","get","then","res","setState","data","onClick","connTestHandler","dbTestHandler","this","Component","Home","link","href","Router","path","exact","component","App","className","Boolean","window","location","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPAEaA,EAAM,wB,4BCEEC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,iCACTC,OAAQ,iCAJO,E,mDAQnB,WAAmB,IAAD,OCTXC,IAAMC,IAAIP,GDULQ,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAACN,QAASK,EAAIE,Y,2BAGtD,WAAiB,IAAD,OCTTL,IAAMC,IAAIP,EAAM,SDUZQ,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAACL,OAAQI,EAAIE,Y,oBAGpD,WAAU,IAAD,OACP,OACE,gCACE,+CACA,uDACA,wBAAQC,QAAS,kBAAM,EAAKC,mBAA5B,sBACA,wBAAQD,QAAS,kBAAM,EAAKE,iBAA5B,qBACA,6BAAKC,KAAKZ,MAAMC,UAChB,6BAAKW,KAAKZ,MAAME,gB,GAzBUW,aEFbC,E,4JACnB,WACE,OACE,gCACE,4DACA,mBAAGC,MAAI,EAACC,KAAK,QAAb,8B,GAL0BH,aCSbI,E,4JACnB,WACE,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,cAAC,IAAD,CAAOI,KAAK,QAAQC,OAAK,EAACC,UAAWtB,W,GALTe,aCSrBQ,MAZf,WACE,OACE,cAAC,IAAD,UACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,WCDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCPAC,G,MAAQC,YACZL,OAAOM,8BAAgCN,OAAOM,iCAGhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02a6009e.chunk.js","sourcesContent":["// File is used for API methods\n\nexport const url = \"http://127.0.0.1:5000\"","import React, { Component } from 'react'\n\nimport { testApi, testDB } from '../Services/TestService';\n\nexport default class Test extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      apiResp: \"no connection to api attempted\",\n      dbResp: \"no connection to db attempted\"\n    }\n  }\n\n  connTestHandler() {\n    testApi().then((res) => this.setState({apiResp: res.data}))\n  }\n\n  dbTestHandler() {\n    testDB().then((res) => this.setState({dbResp: res.data}))\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Peterest Home</h1>\n        <p>Test connection to API</p>\n        <button onClick={() => this.connTestHandler()}>Test API</button>\n        <button onClick={() => this.dbTestHandler()}>Test DB</button>\n        <h3>{this.state.apiResp}</h3>\n        <h3>{this.state.dbResp}</h3>\n      </div>\n    )\n  }\n}\n","import { url } from '../Api/api'\nimport axios from 'axios'\n\nexport function testApi() {\n  return axios.get(url)\n}\n\nexport function testDB() {\n  return axios.get(url + \"/test\")\n}","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1>This is the home component</h1>\n        <a link href=\"/test\">Goto test</a>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Test from \"./Views/Test.js\";\nimport Home from \"./Views/Home.js\";\n// import Dashboard from \"./views/Dashboard.js\";\n// import Friends from \"./views/Friends.js\";\n// import Settings from \"./views/Settings.js\";\n// import Profile from \"./views/Profile.js\";\n// import Albums from \"./views/Albums.js\";\n\nexport default class Router extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/test\" exact component={Test}/>\n        {/* <Route path=\"/dashboard\" exact component={Dashboard}/>\n        <Route path=\"/friends\" exact component={Friends}/>\n        <Route path=\"/settings\" exact component={Settings}/>\n        <Route path=\"/profile\" exact component={Profile}/>\n        <Route path=\"/albums\" exact component={Albums}/> */}\n      </Switch>\n    )\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\n// import './assets/css/Reset.css';\nimport './Assets/css/App.css';\n\nimport Router from './Router.js';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <div className=\"container\">\n          <Router/>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Assets/css/index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport 'fontsource-roboto';\n\nconst store = createStore(\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}